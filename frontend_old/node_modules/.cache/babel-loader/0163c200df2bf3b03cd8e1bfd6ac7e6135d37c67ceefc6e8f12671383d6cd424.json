{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\n\n// ðŸ”¹ Tipas registracijos/prisijungimo formos duomenims\n\n// ðŸ”¹ Atsakymas iÅ¡ login endpoint'o\n\n// ðŸ”¹ Registracijos atsakymas\n\n// ðŸ”¸ REGISTRACIJA\nexport async function registerUser(data) {\n  const response = await fetch(`${API_URL}/api/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  const result = await response.json();\n  if (!response.ok) throw new Error(result.message || \"Registracijos klaida\");\n  return result;\n}\n\n// ðŸ”¸ PRISIJUNGIMAS\nexport async function loginUser(data) {\n  const response = await fetch(`${API_URL}/api/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  const result = await response.json();\n  if (!response.ok) throw new Error(result.message || \"Prisijungimo klaida\");\n  return result;\n}","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","registerUser","data","response","fetch","method","headers","body","JSON","stringify","result","json","ok","Error","message","loginUser"],"sources":["C:/Users/Default.DESKTOP-UT1KAM9/Desktop/Projects/varztai3/varztai/Blackjack/frontend/src/services/authService.ts"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\r\n\r\n// ðŸ”¹ Tipas registracijos/prisijungimo formos duomenims\r\nexport interface AuthData {\r\n  email: string;\r\n  password: string;\r\n  username?: string; // registracijai reikalingas, loginui - ne\r\n}\r\n\r\n// ðŸ”¹ Atsakymas iÅ¡ login endpoint'o\r\nexport interface LoginResponse {\r\n  message: string;\r\n  token: string;\r\n  username: string;\r\n  balance: number;\r\n}\r\n\r\n// ðŸ”¹ Registracijos atsakymas\r\nexport interface RegisterResponse {\r\n  message: string;\r\n}\r\n\r\n// ðŸ”¸ REGISTRACIJA\r\nexport async function registerUser(data: AuthData): Promise<RegisterResponse> {\r\n  const response = await fetch(`${API_URL}/api/register`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(data)\r\n  });\r\n\r\n  const result = await response.json();\r\n  if (!response.ok) throw new Error(result.message || \"Registracijos klaida\");\r\n\r\n  return result;\r\n}\r\n\r\n// ðŸ”¸ PRISIJUNGIMAS\r\nexport async function loginUser(data: AuthData): Promise<LoginResponse> {\r\n  const response = await fetch(`${API_URL}/api/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(data)\r\n  });\r\n\r\n  const result = await response.json();\r\n  if (!response.ok) throw new Error(result.message || \"Prisijungimo klaida\");\r\n\r\n  return result;\r\n}"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAExE;;AAOA;;AAQA;;AAKA;AACA,OAAO,eAAeC,YAAYA,CAACC,IAAc,EAA6B;EAC5E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,eAAe,EAAE;IACtDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CAAC,CAAC;EAEF,MAAMQ,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EACpC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE,MAAM,IAAIC,KAAK,CAACH,MAAM,CAACI,OAAO,IAAI,sBAAsB,CAAC;EAE3E,OAAOJ,MAAM;AACf;;AAEA;AACA,OAAO,eAAeK,SAASA,CAACb,IAAc,EAA0B;EACtE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,YAAY,EAAE;IACnDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CAAC,CAAC;EAEF,MAAMQ,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EACpC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE,MAAM,IAAIC,KAAK,CAACH,MAAM,CAACI,OAAO,IAAI,qBAAqB,CAAC;EAE1E,OAAOJ,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}